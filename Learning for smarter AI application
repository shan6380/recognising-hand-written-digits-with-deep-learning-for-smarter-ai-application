import tensorflow as tf
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from google.colab import files
import io
import tensorflow_datasets as tfds

# Define character mapping for EMNIST-byclass (0-9, A-Z, a-z)
char_map = [str(i) for i in range(10)] + [chr(i) for i in range(65, 91)] + [chr(i) for i in range(97, 123)]

# Load and preprocess EMNIST dataset
def load_emnist():
    ds_train, ds_test = tfds.load('emnist/byclass', split=['train', 'test'], as_supervised=True)
    
    def preprocess(image, label):
        image = tf.cast(image, tf.float32) / 255.0  # Normalize to [0, 1]
        image = tf.expand_dims(image, axis=-1)  # Add channel dimension
        label = tf.cast(label, tf.int32)
        return image, label
    
    ds_train = ds_train.map(preprocess).batch(128).prefetch(tf.data.AUTOTUNE)
    ds_test = ds_test.map(preprocess).batch(128).prefetch(tf.data.AUTOTUNE)
    
    # Convert to numpy for compatibility with existing code
    x_train, y_train = [], []
    for img, lbl in tfds.as_numpy(ds_train):
        x_train.append(img)
        y_train.append(lbl)
    x_train = np.concatenate(x_train, axis=0)
    y_train = np.concatenate(y_train, axis=0)
    
    x_test, y_test = [], []
    for img, lbl in tfds.as_numpy(ds_test):
        x_test.append(img)
        y_test.append(lbl)
    x_test = np.concatenate(x_test, axis=0)
    y_test = np.concatenate(y_test, axis=0)
    
    y_train = tf.keras.utils.to_categorical(y_train, 62)
    y_test = tf.keras.utils.to_categorical(y_test, 62)
    
    return (x_train, y_train), (x_test, y_test)

(x_train, y_train), (x_test, y_test) = load_emnist()

# Build CNN model
model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(62, activation='softmax')  # 62 classes for 0-9, A-Z, a-z
])
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train model
model.fit(x_train, y_train, epochs=10, batch_size=128, validation_data=(x_test, y_test), verbose=1)

# Evaluate model
test_loss, test_accuracy = model.evaluate(x_test, y_test, verbose=0)
print(f"Test Accuracy: {test_accuracy:.4f}")

# Image upload in Colab
print("Upload a 28x28 grayscale image of a digit (0–9) or letter (A–Z, a–z)")
uploaded = files.upload()

if uploaded:
    # Process the first uploaded image
    file_name = list(uploaded.keys())[0]
    image = Image.open(io.BytesIO(uploaded[file_name])).convert('L')  # Convert to grayscale
    image = image.resize((28, 28))  # Resize to 28x28
    image_array = np.array(image).astype('float32') / 255.0
    image_array = image_array.reshape(1, 28, 28, 1)

    # Predict
    prediction = model.predict(image_array)
    predicted_class = np.argmax(prediction)
    predicted_char = char_map[predicted_class]
    confidence = prediction[0][predicted_class]

    # Display results
    plt.figure(figsize=(4, 4))
    plt.imshow(image, cmap='gray')
    plt.title(f"Predicted Character: {predicted_char}\nConfidence: {confidence:.2%}")
    plt.axis('off')
    plt.show()

    # Plot prediction probabilities
    plt.figure(figsize=(12, 4))
    plt.bar(range(62), prediction[0], tick_label=char_map)
    plt.xlabel("Character")
    plt.ylabel("Probability")
    plt.title("Prediction Probabilities")
    plt.xticks(rotation=90)
    plt.show()
else:
    print("No image uploaded.")
